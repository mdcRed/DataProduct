data(olive)
olive = olive[,-1]
olive
colnames(olive)
model.b = rpart(Area ~ ., data=olive)
newdata.cart = as.data.frame(t(colMeans(olive)))
newdata = as.data.frame(t(colMeans(olive)))
predict(model.b, newdata)
newdata
olive
View(olive)
View(olive)
newdata
View(olive)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
vowel.train$y = as.factor(vowel.train$y)
vowel.test$y = as.factor(vowel.test$y)
set.seed(33833)
# Fit a random forest predictor relating the factor variable y to the remaining variables. Read about variable importance in random forests here: http://www.stat.berkeley.edu/~breiman/RandomForests/cc_home.htm#ooberr The caret package uses by defualt the Gini importance. Calculate the variable importance using the varImp function in the caret package. What is the order of variable importance?
vowel.rfmodel <- train(y ~ ., data=vowel.train, method="rf")
## Loading required package: randomForest
## randomForest 4.6-10
## Type rfNews() to see new features/changes/bug fixes.
varImp(vowel.rfmodel)
answer
library(lattice)
library(ggplot2)
library(caret)
library(randomForest)
trainingurlfile<-'http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv'
trainingdata<-read.csv(trainingurlfile)
testingurlfile <- 'http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv'
finaltestingdata <-read.csv(testingurlfile)
dim(trainingdata)
dim(finaltestingdata)
trainingdata <- trainingdata[,!sapply(trainingdata,function(x) any(is.na(x)))]
finaltestingdata <- finaltestingdata[,!sapply(finaltestingdata,function(x) any(is.na(x)))]
training <- training[ , !names(training) %in% c("X", "user_name", "raw_timestamp_part_1", "raw_timestamp_part_2", "cvtd_timestamp",  "num_window")]
testing<- testing[ , !names(testing) %in% c("X", "user_name", "raw_timestamp_part_1", "raw_timestamp_part_2", "cvtd_timestamp",  "num_window")]
badCols <- nearZeroVar(training)
training <-training[,-badCols]
testing <- testing[,-badCols]
inTrain <- createDataPartition(y=trainingdata$classe, p =0.7, list = FALSE)
training <- trainingdata[inTrain,]
testing <- trainingdata[-inTrain,]
set.seed(1235)
modFit <-train(classe~., data = training, model = "rf", ntree = 100)
modFit<- randomForest (as.factor(training$classe) ~ .
, training
, ntree=10
, norm.votes=FALSE)
modFit<- randomForest (as.factor(training$classe) ~ .
, training
, ntree=10
, norm.votes=FALSE)
install.packages("randomForest")
install.packages("randomForest")
library(randomForest)
modFit<- randomForest (as.factor(training$classe) ~ .
, training
, ntree=10
, norm.votes=FALSE)
training
View(training)
View(training)
dtm.mat
dtm.mat
source('~/Documents/Coursera/tm/textMining_1.R')
dtm.mat
summary(dtm.mat)
dtm
dtm.freq <- colSumms(dtm.mat)
dtm.freq <- colSums(dtm.mat)
dtm.freq
length(dtm.freq)
dtm.freq.order <- order(dtm.freq)
dim(dtm.mat)
write.csv(dtm.mat,file="dtm.csv")
source('~/Documents/Coursera/tm/textMining_1.R')
source('~/Documents/Coursera/tm/textMining_1.R')
dtms <- removeSparseTerms(dtm, 0.1);
dtms
inspect(dtms)
source('~/Documents/Coursera/tm/textMining_1.R')
dtms
dtm
dtms <- removeSparseTerms(dtm, 0.1);
dtms
dtm
dtm.mat
source('~/Documents/Coursera/tm/textMining_1.R')
dtms
dtm
dist.mat
dtm.freq
source('~/Documents/Coursera/tm/textMining_1.R')
hist(apply(dtm, 1, sum), xlab="#terms in TDM")
hist(apply(dtm, 1, sum), xlab="#terms in TDM")
hist(apply(dtm, 1, sum), xlab="#terms in TDM")
source('~/Documents/Coursera/tm/textMining_1.R')
hist(apply(dtm, 1, sum), xlab="#terms in TDM")
hist(apply(dtms, 1, sum), xlab="#terms in TDM")
dtms
inspect(dtms)
dtm.freq[tail(dtm.freq.order)]
source('~/Documents/Coursera/tm/textMining_1.R')
install.packages ("rjson")
json_data <- fromJSON(file=./data/GGEO_001.json)
library(rjson)
json_data <- fromJSON(file=./data/GGEO_001.json)
source('~/Documents/R/json/parse.R')
source('~/Documents/R/json/parse.R')
source('~/Documents/R/json/parse.R')
source('~/Documents/R/json/parse.R')
source('~/Documents/R/json/parse.R')
pwd
source('~/Documents/R/json/parse.R')
json_data
source('~/Documents/R/json/parse.R')
install.packages(jsonlite, rependencies=TRUE)
install.packages("jsonlite", rependencies=TRUE)
install.packages("jsonlite", repos="http://cran.r-project.org")
library(jsonlite)
json_data <- fromJSON(file= "/Users/mycoyne/Documents/R/data/GEO_001.json")
json_data <- fromJSON("/Users/mycoyne/Documents/R/data/GEO_001.json")
library(jsonlite)
json_data <- fromJSON("/Users/mycoyne/Documents/R/data/GEO_001.json")
library(jsonlite)
json_data <- fromJSON("/Users/mycoyne/Documents/R/data/GEO_001.json")
library(jsonlite)
json_data <- fromJSON("/Users/mycoyne/Documents/R/data/GEO_001.json")
library(jsonlite)
json_data <- fromJSON("/Users/mycoyne/Documents/R/data/GEO_001.json")
library(jsonlite)
json_data <- fromJSON("/Users/mycoyne/Documents/R/data/GEO_001.json")
json_data
colnames(data1)
colnames(json_data)
class(json_data)
source('~/Documents/R/json/parse.R')
source('~/Documents/R/json/parse.R')
source('~/Documents/Coursera/DataProduct/wordcloud/ui.R')
source('~/Documents/Coursera/DataProduct/wordcloud/ui.R')
source('~/Documents/Coursera/DataProduct/wordcloud/ui.R')
source('~/Documents/Coursera/DataProduct/wordcloud/ui.R')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
source('~/Documents/Coursera/DataProduct/wordcloud/ui.R')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
install.packages("wordcloud")
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
require("slidify")
install.packages("slidify")
library("slidify")
require ("slidify")
source('~/Documents/Coursera/DataProduct/wordcloud/getDocumentsFromFileSystem.R')
source('~/Documents/Coursera/DataProduct/wordcloud/getDocumentsFromFileSystem.R')
list.files('~')
getwd
getwd()
source('~/Documents/Coursera/DataProduct/wordcloud/getDocumentsFromFileSystem.R')
R.home()
getwd()
environment()
getenv()
path.expand()
source('~/Documents/Coursera/DataProduct/wordcloud/getDocumentsFromFileSystem.R')
source()
dirname(sys.frame(1)$ofile)
dirname(sys.frame(1))
sys.frame
source('~/Documents/Coursera/DataProduct/wordcloud/getDocumentsFromFileSystem.R')
dir <- "~/data/"
dir
list.files(dir)
list.files("~/Documents/Coursera/DataProduct/wordclound/data")
sys.getenv()
Sys.getenv()
Sys.getenv("PWD")
Sys.getenv("pwd")
Sys.getenv()
list.files()
dir
dir <- "~/Documents/Coursera/DataProduct/data"
list.files(dir)
source('~/Documents/Coursera/DataProduct/wordcloud/getDocumentsFromFileSystem.R')
dir <- "~/Documents/Coursera/DataProduct/wordcloud/data"
list.files(dir)
source('~/Documents/Coursera/DataProduct/wordcloud/getDocumentsFromFileSystem.R')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
fullpathDirectory <- "~/Documents/Coursera/DataProduct/data";
listOfFn <- list.files(fillpathDirectory)
listOfFn <- list.files(fullpathDirectory)
strSplit(listOfFn)
strsplit(listOfFn, " ")
listOfFn
listOfFn <- list.files(fullpathDirectory);
listOfFn
fullpathDirectory <- "~/Documents/Coursera/DataProduct/data";
listOfFn <- list.files(fullpathDirectory);
strsplit(listOfFn, " ")
listOfFn
fullpathDirectory
list.files(fullpathDirectory)
fullpathDirectory <- "~/Documents/Coursera/DataProduct/wordcloud/data";
listOfFn <- list.files(fullpathDirectory);
listOfFn
strsplit(listOfFn, " ")
strsplit(listOfFn, ".txt")
source('~/Documents/Coursera/DataProduct/wordcloud/getDocumentsFromFileSystem.R')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
labels
source('~/Documents/Coursera/DataProduct/wordcloud/getDocumentsFromFileSystem.R')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
labels
source('~/Documents/Coursera/DataProduct/wordcloud/getDocumentsFromFileSystem.R')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
labelDf
labels
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
labels
source('~/Documents/Coursera/DataProduct/wordcloud/getDocumentsFromFileSystem.R')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
getDocumentsFromFileSystem <- function(fullpathDirectory){
listOfFn <- list.files(fullpathDirectory);
labelDf <- strsplit(listOfFn,".txt");
labelDf <- data.frame(t(labelDf));
colnames(labelDf)<- "label"
labelDf
}
fullpathDirectory <- "~/Documents/Coursera/DataProduct/wordcloud/data";
labels <- getDocumentsFromFileSystem(fullpathDirectory);
labels
fullpathDirectory <- "~/Documents/Coursera/DataProduct/wordcloud/data";
listOfFn <- list.files(fullpathDirectory);
labelDf <- strsplit(listOfFn,".txt");
labelDf <- data.frame(t(labelDf));
colnames(labelDf)<- "label"
labelDf
labelDf
labelDf <- strsplit(listOfFn,".txt");
labelDf
class(labelDf)
labelDf <- data.frame(t(labelDf));
labelDf
labelDf <- as.data.frame(t(labelDf));
labelDf
colnames(labelDf)<- "label"
labelDf
source('~/Documents/Coursera/DataProduct/wordcloud/getDocumentsFromFileSystem.R')
labels
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
labels
fullpathDirectory <- "~/Documents/Coursera/DataProduct/wordcloud/data";
listOfFn <- list.files(fullpathDirectory);
labelDf <- strsplit(listOfFn,".txt");
labelDf <- as.data.frame(t(labelDf));
colnames(labelDf)<- "label"
labelDf
fullpathDirectory <- "~/Documents/Coursera/DataProduct/wordcloud/data";
listOfFn <- list.files(fullpathDirectory);
labelDf <- strsplit(listOfFn,".txt");
labelDf <- as.data.frame(t(labelDf));
colnames(labelDf)<- "label"
labelDf
t(labelDf)
labelDf <- t(labelDf);
labelDf
labelDf <- data.frame(labelDf);
labelDf
colnames(labelDf)<- "label"
labelDf
source('~/Documents/Coursera/DataProduct/wordcloud/getDocumentsFromFileSystem.R')
labels
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
labels
source('~/Documents/Coursera/DataProduct/wordcloud/getDocumentsFromFileSystem.R')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
labels
fullpathDirectory <- "~/Documents/Coursera/DataProduct/wordcloud/data";
listOfFn <- list.files(fullpathDirectory);
labelDf <- strsplit(listOfFn,".tx
t")
labelDf
length(labelDf)
labelDf <- data.frame(labelDf);
labelDf
labelDf <- t(data.frame(labelDf));
labelDf
colnames(labelDf)<- "label"
labelDf
labelDf
source('~/Documents/Coursera/DataProduct/wordcloud/getDocumentsFromFileSystem.R')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
labels
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
source('~/Documents/Coursera/DataProduct/wordcloud/getDocumentsFromFileSystem.R')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
site <- "https://www.fastlane.nsf.gov/a6/A6RC_7-12-2015.html"
page <- readLines(site)
site <- "http://www.fastlane.nsf.gov/a6/A6RC_7-12-2015.html"
page <- readLines(site)
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
source('~/Documents/Coursera/DataProduct/wordcloud/ui.R')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
source('~/Documents/Coursera/DataProduct/wordcloud/ui.R')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
cname <- file.path("~", "Documents/Coursera/DataPropduct/wordcloud/data");
#cname <- file.path("~", "Documents/Coursera/tm/data", "testCorpus");
cname
dir(cname)
cname <- file.path("~", "Documents/Coursera/DataPropduct/wordcloud/data");
#cname <- file.path("~", "Documents/Coursera/tm/data", "testCorpus");
cname
dir(cname)
dir(cname)
list.files(cname)
cname <- file.path("~", "Documents/Coursera/DataPropduct/wordcloud/data/");
#cname <- file.path("~", "Documents/Coursera/tm/data", "testCorpus");
cname
dir(cname)
cname <- file.path("~", "Documents/Coursera/DataProduct/wordcloud/data");
cname
dir(cname)
docs <- Corpus(DirSource(cname))
library(tm)
docs <- Corpus(DirSource(cname))
summary(docs)
docs.working <- tm_map(docs, removePunctuation)
docs.working <- tm_map(docs.working, removeNumbers)
docs.working <- tm_map(docs.working, content_transformer(tolower), lazy=TRUE)
docs.working <- tm_map(docs.working, removeWords, stopwords("english"), lazy=TRUE)
library(tm)
docs <- Corpus(DirSource(cname))
summary(docs)
docs.working <- tm_map(docs, removePunctuation)
docs.working <- tm_map(docs.working, removeNumbers)
docs.working <- tm_map(docs.working, content_transformer(tolower), lazy=TRUE)
library(SnowballC)
docs.working <- tm_map(docs.working, stemDocument, lazy=TRUE);
docs.working <- tm_map(docs.working, stripWhitespace, lazy=TRUE);
docs.working <- tm_map(docs.working, PlainTextDocument, lazy= TRUE);
dtm <- DocumentTermMatrix(docs.working)
dtm.mat <- as.matrix(dtm)
dist.mat <- dist(t(dtm.mat))
dtm.freq <- colSums(dtm.mat)
length(dtm.freq)
dtm
dtm.mat
dtms <- removeSparseTerms(dtm, 0.1)
dtms
dtms.mat <- as.matrix(dtms)
dtms.dist.mat <- dist(t(dtms.mat))
dtms.mat
dtm_tfxidf <- weightTfIdf(dtm)
inspect(dtm_tfxidf[1:10, 5001:5010])
dim dtm_tfxidf
dim (dtm_tfxidf)
inspect(dtm_tfxidf[1:10, 900:1014])
m <- as.matrix(dtm_tfxidf)
rownames(m) <- 1:nrow(m)
norm_eucl <- function(m) m/apply(m, MARGIN=1, FUN=function(x) sum(x^2)^.5)
m_norm <- norm_eucl(m)
cl <- kmeans(m_norm, 5)
cl
table(cl$cluster)
plot(prcomp(m_norm)$x, col=cl$cl)
plot(prcomp(m_norm)$x, col=cl$cl)
plot(prcomp(m_norm)$x, col=cl$cl)
findFreqTerms(dtm[cl$cluster==1], 50)
inspect(reuters[which(cl$cluster==1)])
findFreqTerms(dtm[cl$cluster==1], 50)
inspect(docs[which(cl$cluster==1)])
library(proxy)
### this is going to take 4-ever (O(n^2))
d <- dist(m, method="cosine")
hc <- hclust(d, method="average")
plot(hc)
cl <- cutree(hc, 50)
table(cl)
findFreqTerms(dtm[cl==1], 50)
shiny::runApp('Documents/Coursera/DataProduct/length_conversion')
shiny::runApp('Documents/Coursera/DataProduct/length_conversion')
source: ui.R
install.packages("httpuv")
install.packages("httpuv")
install.packages('catools')
install.packages('caTools')
shiny::runApp('Documents/Coursera/DataProduct/length_conversion')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
install.packages("tm", dependencies = TRUE)
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
install.packages("wordcloud", dependencies = TRUE)
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
#           , "biclust", "cluster", "igraph", "fpc")
source('~/Documents/Coursera/tm/textMining_1.R')
cname <- file.path("~", "Documents/Coursera/DataProduct/wordcloud/data");
cname
dir(cname)
cname <- file.path("~", "Documents/Coursera/DataProduct/wordcloud/data");
cname
dir(cname)
#
library(tm)
docs <- Corpus(DirSource(cname))
summary(docs)
docs.working <- tm_map(docs, removePunctuation)
docs.working <- tm_map(docs.working, removeNumbers)
docs.working <- tm_map(docs.working, content_transformer(tolower), lazy=TRUE)
docs.working <- tm_map(docs.working, removeWords, stopwords("english"), lazy=TRUE)
library(SnowballC)
docs.working <- tm_map(docs.working, stemDocument, lazy=TRUE);
docs.working <- tm_map(docs.working, stripWhitespace, lazy=TRUE);
docs.working <- tm_map(docs.working, PlainTextDocument, lazy= TRUE);
source('~/Documents/Coursera/tm/textMining_1.R')
source('~/Documents/Coursera/tm/textMining_1.R')
dtms <- removeSparseTerms(dtm, 0.1);
dtms.mat <- as.matrix(dtms)
dtms.dist.mat <- dist(t(dtms.mat))
dtm_tfxidf <- weightTfIdf(dtm)
inspect(dtm_tfxidf[1:10, 900:1014])
dtm_tfxidf <- weightTfIdf(dtm)
inspect(dtm_tfxidf[1:10, 50:100])
source('~/Documents/Coursera/tm/textMining_1.R')
source('~/Documents/Coursera/tm/textMining_1.R')
source('~/Documents/Coursera/tm/textMining_1.R')
library(proxy)
### this is going to take 4-ever (O(n^2))
d <- dist(m, method="cosine")
hc <- hclust(d, method="average")
plot(hc)
cl <- cutree(hc, 50)
table(cl)
findFreqTerms(dtm[cl==1], 50)
list.files()
sys.frame(1)
sys.frame()
sys.frame(1)$ofile
getwd()
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
source('~/Documents/Coursera/DataProduct/wordcloud/getDocumentsFromFileSystem.R')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
source ("./getDocumnetsFromFileSystem.R")
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='mycoyne', token='FA5D2A7DC2B86527902302747F0E55F6', secret='kbQKtbhvJrbYXscTp+Q/VZ2OrbGftbtr21RbAbKK')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
library(shinyapps)
shinyapps::deployApp('Documents/Coursera/DataProduct/wordcloud')
source('~/Documents/Coursera/DataProduct/wordcloud/textClustering.R')
- <span style="color:blue">**Problem Statement:**</span> Term Document Matrix is a most frequent use for exploratory text analysis.  The matrix presents the frequency of words in a document.
**Problem Statement:** Term Document Matrix is a most frequent use for exploratory text analysis.  The matrix presents the frequency of words in a document.
-- Problem Statement: Term Document Matrix is a most frequent use for exploratory text analysis.  The matrix presents the frequency of words in a document.
- Problem Statement: Term Document Matrix is a most frequent use for exploratory text analysis.  The matrix presents the frequency of words in a document.
- Bullet 1
- Bullet 2
========================================================
```{r}
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
runApp("wordcloud")
runApp('Documents/Coursera/DataProduct/wordcloud')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
View(dtms.mat)
View(dtm.mat)
View(dtm.mat)
View(m)
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
shiny::runApp('Documents/Coursera/DataProduct/wordcloud')
setwd("~/Documents/Coursera/DataProduct/wordcloud")
